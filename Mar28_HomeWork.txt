"1. WAP for searching a number using binary search. Return the index of the num if exists else return 

----->>>>
ans:
  package mar28;
          //binary serch  time complexity is (log(n));
public class Find_num_using_binary_serch {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
              
		int[] arr= {1,2,4,5,6,7,8,9};
		int n=7;
		boolean index=findmissingNumber(arr,n);
		System.out.println(index);
	}
	public static boolean findmissingNumber(int[] arr,int n)
	{
		boolean  i=false;
		
		 int start=0;
		 int end=arr.length-1;
		 while(start<=end)
		 {
			 int mid=start+(end-start)/2;
			
			 if(mid==n)
				 return true;
			 
			 else if(mid<n)
				 start=mid+1;
			 
			 else if(mid>n)
				 end=mid-1;
			 
		 }
		 return i;
	}

}

     
2. Find the cube root of a number using binary search

---->>>
   package mar28;
import java.util.*;

public class Binary_search_cubeRoot {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);

		int n=sc.nextInt();
		int cubeRootNumber=findCuberoot(n);
		System.out.println(cubeRootNumber);

	}
	public static int findCuberoot(int n)
	{
		   int start=0;
		   int end=n;
		   while(start<=end)
		   {
			   int mid=start+(end-start)/2;
			   
			   if(mid*mid*mid==n)
				   return mid;
			   
			   else if(mid*mid*mid<n)
				   start=mid+1;
			   
			   else
				   end=mid-1;
		   }
		  
		return 0;
	}

}

3. Find the intersection elements of two sorted arrays
A[] = { 3,6,8}   B[] ={1,2,3,5,6,90,789}
Output = 3,6"

package Apr11_class;

public class findIntersection_03 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] a = { 2, 4, 6, 8, 9 };
		int[] b = { 1, 2, 3,6 };

		if (a.length > b.length) {
			int index = 0;
			for (int i = 0; i < b.length; i++) {

				index = interSection(a, b[i]);

				if (index != -1)
					System.out.print(b[i]+" ");
			}

		}else 
			  {
		        	int index = 0;
			for (int i = 0; i < a.length; i++) {

				index = interSection(b, a[i]);

				if (index != -1)
					System.out.print(a[i]+" ");
			}

		}


	}

	private static int interSection(int[] a, int target) {
		// TODO Auto-generated method stub
		int start = 0;
		int end = a.length - 1;

		while (start <= end) {
			int mid = start + (end - start) / 2;

			if (a[mid] == target)
				return mid;

			else if (target < a[mid])
				end = mid - 1;

			else
				start = mid + 1;
		}
		return -1;
	}

}
